"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ws_1 = __importDefault(require("ws"));
const Payloads_1 = require("../../constants/Payloads");
const Constants_1 = require("../../constants/Constants");
class WebSocketManager {
    constructor(client) {
        this.client = client;
    }
    async login(token) {
        const properties = { $os: 'linux', $browser: 'nerdcord', $device: 'nerdcord' };
        const identify = {
            op: 2,
            d: { token, properties }
        };
        const GATEWAY = "wss://gateway.discord.gg/?v=6&encoding=json";
        this.socket = await new ws_1.default(GATEWAY);
        this.socket.on("open", () => {
            //console.log("connected")
        });
        /*this.socket.onopen = () => {
            setInterval(() => {
                this.socket.send(JSON.stringify(identify))
            }, 41250)
        }*/
        this.socket.on("message", async (message) => {
            const payload = JSON.parse(message.toString());
            const { t: event, s, op, d } = payload;
            const { heartbeat_interval } = d;
            // console.log(payload)
            switch (payload.op) {
                case Constants_1.OPCODE.ZERO:
                    break;
                case Constants_1.OPCODE.TEN:
                    this.interval = this.heartbeat(heartbeat_interval);
                    await this.identify(token);
                    break;
                case Constants_1.OPCODE.ELEVEN:
                    break;
            }
            if (event) {
                try {
                    const { default: module } = await Promise.resolve().then(() => __importStar(require(`../handlers/${event}`)));
                    module(this.client, payload);
                }
                catch (e) {
                    console.log(e);
                }
            }
        });
    }
    heartbeat(ms) {
        return setInterval(() => {
            this.socket.send(JSON.stringify(Payloads_1.Heartbeat));
        }, ms);
    }
    async identify(token) {
        Payloads_1.Identify.d.token = token;
        return this.socket.send(JSON.stringify(Payloads_1.Identify));
    }
}
exports.default = WebSocketManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViU29ja2V0TWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL3dzL1dlYlNvY2tldE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNENBQTJCO0FBQzNCLHVEQUFxRTtBQUNyRSx5REFBZ0Q7QUFHaEQsTUFBcUIsZ0JBQWdCO0lBSWpDLFlBQW9CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBRWxDLENBQUM7SUFHQSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQWE7UUFDdEIsTUFBTSxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBQyxDQUFBO1FBQzdFLE1BQU0sUUFBUSxHQUFHO1lBQ2YsRUFBRSxFQUFFLENBQUM7WUFDTCxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO1NBQ3pCLENBQUM7UUFFRixNQUFNLE9BQU8sR0FBRyw2Q0FBNkMsQ0FBQztRQUU5RCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxZQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUN4QiwwQkFBMEI7UUFDOUIsQ0FBQyxDQUFDLENBQUE7UUFFRjs7OztXQUlHO1FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBQyxPQUFPLEVBQUMsRUFBRTtZQUN0QyxNQUFNLE9BQU8sR0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1lBQ3ZELE1BQU0sRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFDLEdBQUcsT0FBTyxDQUFBO1lBQ25DLE1BQU0sRUFBQyxrQkFBa0IsRUFBQyxHQUFHLENBQUMsQ0FBQTtZQUMvQix1QkFBdUI7WUFDdEIsUUFBUSxPQUFPLENBQUMsRUFBRSxFQUFFO2dCQUNoQixLQUFLLGtCQUFNLENBQUMsSUFBSTtvQkFDWixNQUFNO2dCQUNWLEtBQUssa0JBQU0sQ0FBQyxHQUFHO29CQUNYLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO29CQUNsRCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7b0JBQzFCLE1BQU07Z0JBQ1YsS0FBSyxrQkFBTSxDQUFDLE1BQU07b0JBQ2QsTUFBTTthQUNiO1lBQ0QsSUFBSSxLQUFLLEVBQUU7Z0JBQ1AsSUFBSTtvQkFDQSxNQUFNLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBQyxHQUFHLHdEQUFhLGVBQWUsS0FBSyxFQUFFLEdBQUMsQ0FBQTtvQkFDOUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUE7aUJBQy9CO2dCQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ2pCO2FBQ0o7UUFFTCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxTQUFTLENBQUMsRUFBVTtRQUNoQixPQUFPLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBUyxDQUFDLENBQUMsQ0FBQTtRQUMvQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDVixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFhO1FBQ3hCLG1CQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDeEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFRLENBQUMsQ0FBQyxDQUFBO0lBQ3JELENBQUM7Q0FFSjtBQXBFRCxtQ0FvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV2ViU29ja2V0IGZyb20gXCJ3c1wiO1xuaW1wb3J0IHtQYXlsb2FkLCBIZWFydGJlYXQsIElkZW50aWZ5fSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL1BheWxvYWRzXCJcbmltcG9ydCB7T1BDT0RFfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL0NvbnN0YW50c1wiXG5pbXBvcnQgQ2xpZW50IGZyb20gXCIuLi9jbGllbnQvQ2xpZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYlNvY2tldE1hbmFnZXIge1xuICAgIHByaXZhdGUgc29ja2V0ITogV2ViU29ja2V0XG4gICAgcHJpdmF0ZSBpbnRlcnZhbDogYW55O1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2xpZW50OiBDbGllbnQpIHtcblxuICAgIH1cblxuXG4gICAgIGFzeW5jIGxvZ2luKHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHsgJG9zOiAnbGludXgnLCAkYnJvd3NlcjogJ25lcmRjb3JkJywgJGRldmljZTogJ25lcmRjb3JkJ31cbiAgICAgICAgY29uc3QgaWRlbnRpZnkgPSB7XG4gICAgICAgICAgb3A6IDIsXG4gICAgICAgICAgZDogeyB0b2tlbiwgcHJvcGVydGllcyB9XG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIGNvbnN0IEdBVEVXQVkgPSBcIndzczovL2dhdGV3YXkuZGlzY29yZC5nZy8/dj02JmVuY29kaW5nPWpzb25cIjtcbiAgICBcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBhd2FpdCBuZXcgV2ViU29ja2V0KEdBVEVXQVkpO1xuICAgIFxuICAgICAgICB0aGlzLnNvY2tldC5vbihcIm9wZW5cIiwgKCkgPT4ge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImNvbm5lY3RlZFwiKVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgLyp0aGlzLnNvY2tldC5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChKU09OLnN0cmluZ2lmeShpZGVudGlmeSkpXG4gICAgICAgICAgICB9LCA0MTI1MClcbiAgICAgICAgfSovXG4gICAgXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKFwibWVzc2FnZVwiLCBhc3luYyBtZXNzYWdlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQ6IFBheWxvYWQgPSBKU09OLnBhcnNlKG1lc3NhZ2UudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIGNvbnN0IHt0OmV2ZW50LCBzLCBvcCwgZH0gPSBwYXlsb2FkXG4gICAgICAgICAgICBjb25zdCB7aGVhcnRiZWF0X2ludGVydmFsfSA9IGRcbiAgICAgICAgICAgLy8gY29uc29sZS5sb2cocGF5bG9hZClcbiAgICAgICAgICAgIHN3aXRjaCAocGF5bG9hZC5vcCkge1xuICAgICAgICAgICAgICAgIGNhc2UgT1BDT0RFLlpFUk86XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgT1BDT0RFLlRFTjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCA9IHRoaXMuaGVhcnRiZWF0KGhlYXJ0YmVhdF9pbnRlcnZhbClcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5pZGVudGlmeSh0b2tlbilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBPUENPREUuRUxFVkVOOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtkZWZhdWx0OiBtb2R1bGV9ID0gYXdhaXQgaW1wb3J0KGAuLi9oYW5kbGVycy8ke2V2ZW50fWApXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZSh0aGlzLmNsaWVudCwgcGF5bG9hZClcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaGVhcnRiZWF0KG1zOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoSGVhcnRiZWF0KSlcbiAgICAgICAgfSwgbXMpXG4gICAgfVxuXG4gICAgYXN5bmMgaWRlbnRpZnkodG9rZW46IHN0cmluZykge1xuICAgICAgICBJZGVudGlmeS5kLnRva2VuID0gdG9rZW5cbiAgICAgICAgcmV0dXJuIHRoaXMuc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoSWRlbnRpZnkpKVxuICAgIH1cblxufVxuXG4iXX0=