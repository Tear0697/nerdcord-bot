"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const WebSocketManager_1 = __importDefault(require("../ws/WebSocketManager"));
const events_1 = require("events");
const node_fetch_1 = __importDefault(require("node-fetch"));
class Client extends events_1.EventEmitter {
    constructor() {
        super(...arguments);
        // @ts-ignore
        this.socket = new WebSocketManager_1.default(this);
    }
    async login(token) {
        if (!token)
            throw new Error("please provide a token");
        this.socket.login(token);
    }
    async createMessage(content, channelID, token) {
        const data = {
            "content": content,
            "tts": false
        };
        const headers = { 'Content-Type': 'application/json', 'Authorization': `Bot ${token}` };
        const response = await node_fetch_1.default(`https://discord.com/api/v6/channels/${channelID}/messages`, {
            method: "POST",
            headers,
            body: JSON.stringify(data)
        });
        const res = await response.json();
        console.log(res);
        return response;
    }
    async createEmbed(description, channelID, token, title) {
        const data = {
            "tts": false,
            "embed": {
                "title": title,
                "description": description
            }
        };
        const headers = { 'Content-Type': 'application/json', 'Authorization': `Bot ${token}` };
        const response = await node_fetch_1.default(`https://discord.com/api/v6/channels/${channelID}/messages`, {
            method: "POST",
            headers,
            body: JSON.stringify(data)
        });
        return response;
    }
    async addGuildBan() {
    }
}
exports.default = Client;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvY2xpZW50L0NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhFQUFxRDtBQUNyRCxtQ0FBb0M7QUFDcEMsNERBQStCO0FBRS9CLE1BQXFCLE1BQU8sU0FBUSxxQkFBWTtJQUFoRDs7UUFDSSxhQUFhO1FBQ0wsV0FBTSxHQUFxQixJQUFJLDBCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBc0RqRSxDQUFDO0lBbkRHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBYTtRQUNyQixJQUFJLENBQUMsS0FBSztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtRQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM1QixDQUFDO0lBR0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFlLEVBQUUsU0FBaUIsRUFBRSxLQUFhO1FBQ2pFLE1BQU0sSUFBSSxHQUFHO1lBQ1QsU0FBUyxFQUFFLE9BQU87WUFDbEIsS0FBSyxFQUFFLEtBQUs7U0FDZixDQUFBO1FBRUQsTUFBTSxPQUFPLEdBQUcsRUFBQyxjQUFjLEVBQUcsa0JBQWtCLEVBQUUsZUFBZSxFQUFHLE9BQU8sS0FBSyxFQUFFLEVBQUMsQ0FBQTtRQUV2RixNQUFNLFFBQVEsR0FBRyxNQUFNLG9CQUFLLENBQUMsdUNBQXVDLFNBQVMsV0FBVyxFQUFFO1lBQ3RGLE1BQU0sRUFBRSxNQUFNO1lBQ2QsT0FBTztZQUNQLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztTQUM3QixDQUFDLENBQUE7UUFFRixNQUFNLEdBQUcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hCLE9BQU8sUUFBUSxDQUFBO0lBQ25CLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQW1CLEVBQUUsU0FBaUIsRUFBRSxLQUFhLEVBQUUsS0FBYTtRQUNsRixNQUFNLElBQUksR0FBRztZQUNULEtBQUssRUFBRSxLQUFLO1lBQ1osT0FBTyxFQUFFO2dCQUNMLE9BQU8sRUFBRSxLQUFLO2dCQUNkLGFBQWEsRUFBRSxXQUFXO2FBQzdCO1NBQ0osQ0FBQTtRQUVELE1BQU0sT0FBTyxHQUFHLEVBQUMsY0FBYyxFQUFHLGtCQUFrQixFQUFFLGVBQWUsRUFBRyxPQUFPLEtBQUssRUFBRSxFQUFDLENBQUE7UUFFdkYsTUFBTSxRQUFRLEdBQUcsTUFBTSxvQkFBSyxDQUFDLHVDQUF1QyxTQUFTLFdBQVcsRUFBRTtZQUN0RixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU87WUFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7U0FDN0IsQ0FBQyxDQUFBO1FBRUYsT0FBTyxRQUFRLENBQUE7SUFDbkIsQ0FBQztJQUdELEtBQUssQ0FBQyxXQUFXO0lBRWpCLENBQUM7Q0FHSjtBQXhERCx5QkF3REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV2ViU29ja2V0TWFuYWdlciBmcm9tIFwiLi4vd3MvV2ViU29ja2V0TWFuYWdlclwiXG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSBcImV2ZW50c1wiO1xuaW1wb3J0IGZldGNoIGZyb20gXCJub2RlLWZldGNoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsaWVudCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHByaXZhdGUgc29ja2V0OiBXZWJTb2NrZXRNYW5hZ2VyID0gbmV3IFdlYlNvY2tldE1hbmFnZXIodGhpcylcblxuXG4gICAgYXN5bmMgbG9naW4odG9rZW46IHN0cmluZykge1xuICAgICAgICBpZiAoIXRva2VuKSB0aHJvdyBuZXcgRXJyb3IoXCJwbGVhc2UgcHJvdmlkZSBhIHRva2VuXCIpXG4gICAgICAgIHRoaXMuc29ja2V0LmxvZ2luKHRva2VuKVxuICAgIH1cbiAgICBcblxuICAgIGFzeW5jIGNyZWF0ZU1lc3NhZ2UoY29udGVudDogc3RyaW5nLCBjaGFubmVsSUQ6IHN0cmluZywgdG9rZW46IHN0cmluZykge1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgXCJjb250ZW50XCI6IGNvbnRlbnQsXG4gICAgICAgICAgICBcInR0c1wiOiBmYWxzZVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7J0NvbnRlbnQtVHlwZScgOiAnYXBwbGljYXRpb24vanNvbicsICdBdXRob3JpemF0aW9uJyA6IGBCb3QgJHt0b2tlbn1gfVxuICAgIFxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2Rpc2NvcmQuY29tL2FwaS92Ni9jaGFubmVscy8ke2NoYW5uZWxJRH0vbWVzc2FnZXNgLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgIH0pXG4gICAgXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICAgIHJldHVybiByZXNwb25zZVxuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZUVtYmVkKGRlc2NyaXB0aW9uOiBzdHJpbmcsIGNoYW5uZWxJRDogc3RyaW5nLCB0b2tlbjogc3RyaW5nLCB0aXRsZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICBcInR0c1wiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiZW1iZWRcIjoge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogdGl0bGUsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBkZXNjcmlwdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7J0NvbnRlbnQtVHlwZScgOiAnYXBwbGljYXRpb24vanNvbicsICdBdXRob3JpemF0aW9uJyA6IGBCb3QgJHt0b2tlbn1gfVxuICAgIFxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2Rpc2NvcmQuY29tL2FwaS92Ni9jaGFubmVscy8ke2NoYW5uZWxJRH0vbWVzc2FnZXNgLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgIH0pXG4gICAgXG4gICAgICAgIHJldHVybiByZXNwb25zZVxuICAgIH1cblxuXG4gICAgYXN5bmMgYWRkR3VpbGRCYW4oKSB7XG5cbiAgICB9XG5cblxufSJdfQ==